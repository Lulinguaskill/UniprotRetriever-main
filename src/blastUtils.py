import os
from Bio import SeqIO
from Bio.Blast import NCBIWWW, NCBIXML
import time
import threading
from queue import Queue
from blast_cmd import run_blast


def save_blast_result(id: str):
    """ generates two .txt and .fasta files from an xml result generated by blast"""
    # Step 0: mark the blasted id


    # Step 1: Parse the BLAST result
    with open(f'data/blast/xml/{id}.xml', 'r') as file:
        blast_record = NCBIXML.read(file)

    # Step 2: Retrieve similar protein sequences
    similar_sequences = []

    for alignment in blast_record.alignments:
        for hsp in alignment.hsps:
            sequence_data = {
                "title": alignment.title,
                "length": alignment.length,
                "e_value": hsp.expect,
                "sequence": alignment.hsps[0].sbjct
            }
            similar_sequences.append(sequence_data)

    # Step 3: Remove duplicates based on sequence
    unique_sequences = []
    seen_sequences = set()

    for sequence_data in similar_sequences:
        sequence = sequence_data["sequence"]
        if sequence not in seen_sequences:
            unique_sequences.append(sequence_data)
            seen_sequences.add(sequence)

    # Step 4: Save unique sequences to a file
    output_file = f'data/blast/output/{id}.txt'

    with open(output_file, "w") as output:
        for seq_data in unique_sequences:
            output.write(f"Title: {seq_data['title']}\n")
            output.write(f"Length: {seq_data['length']}\n")
            output.write(f"E-value: {seq_data['e_value']}\n")
            output.write(f"Sequence: {seq_data['sequence']}\n\n")

    # Step 5: Save unique sequences into a fasta file to align
    fasta_output_file = f'data/blast/output/{id}.fasta'

    with open(fasta_output_file, "w") as output:
        for seq_data in unique_sequences:
            output.write(f">{seq_data['title']}\n")
            output.write(f"{seq_data['sequence']}\n\n")


def get_blast_result(id):
    """ return a list of sequences from an XML file as a list of dictionnaries"""
    sequences = []
    with open(f'data/blast/xml/{id}.xml', 'r') as f:
        blast_record = NCBIXML.read(f)
        for alignment in blast_record.alignments:
            for hsp in alignment.hsps:
                sequence_data = {
                    "title": alignment.title,
                    "length": alignment.length,
                    "e_value": hsp.expect,
                    "sequence": alignment.hsps[0].sbjct
                }
                sequences.append(sequence_data)
    return sequences


def filter_blast_result(sequences, threshold):
    """ filter the sequences on the e-value"""
    filtered_seq = []
    for seq in sequences:
        if seq['e_value'] <= threshold:
            filtered_seq.append(seq)
    return filtered_seq


def blast(prot_id, database_path, threshold):
    """ perform and save a blast on the specified id"""
    output_path = f'data/blast/xml/{prot_id}.xml'
    run_blast(f'data/proteins/{prot_id}/{prot_id}.fasta.txt', database_path,
              output_path, threshold)
    save_blast_result(prot_id)
    return get_blast_result(prot_id)


def sequences_to_fasta(sequences, output_file):
    """
    Convert a list of sequence dictionaries to a FASTA text file.

    Args:
    sequences (list): List of dictionaries representing protein sequences.
    output_file (str): Path to the output FASTA file.
    """
    with open(output_file, 'w') as f:
        for i, seq_data in enumerate(sequences, start=1):
            f.write(f'>{seq_data["title"]}\n')
            f.write(f'{seq_data["sequence"]}\n')













